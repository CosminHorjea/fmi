#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <stdlib.h>

#define MAX_RESOURCES 5
int available_resources = MAX_RESOURCES;
pthread_mutex_t mtx;

int decrease_count (int count)
{
    pthread_mutex_lock(&mtx);
    if(available_resources < count)
    {
        pthread_mutex_unlock(&mtx);
        return -1;
    }
    else
    {
        available_resources -= count;
        printf("Got %d resources, remaining %d resources\n", count, available_resources);
    }

    pthread_mutex_unlock(&mtx);
    return 0;
}

int increase_count(int count)
{
    pthread_mutex_lock(&mtx);
    available_resources += count;
    printf("Release %d resources, remaining %d resources\n", count, available_resources);
    pthread_mutex_unlock(&mtx);
    return 0;
}

void* race_condition(void *ptr);

int main()
{
    pthread_t *thread = malloc(sizeof(pthread_t) * 5);
    printf("MAX_RESOURCES = %d\n", available_resources);

    if(pthread_mutex_init(&mtx, NULL))
    {
        perror("Error on mutex init");
        return errno;
    }

    for(int i = 0; i < 5; i++)
    {
        int *x = malloc(sizeof(int));
        *x = (i + 1) % (MAX_RESOURCES);
        if(pthread_create(&thread[i], NULL, race_condition, x))
        {
            perror("Error on thread create");
            return errno;
        }
    }

    for(int i = 0; i < 5;i++)
        if(pthread_join(thread[i], NULL))
            {
                perror("Error on thread join");
                return errno;
            }
    
    pthread_mutex_destroy(&mtx);
    free(thread);
    return 0;
}

void* race_condition(void *ptr)
{
    int* nr = (int*)ptr;
    decrease_count(*nr);
    increase_count(*nr);

    free(nr);
    return NULL;
}