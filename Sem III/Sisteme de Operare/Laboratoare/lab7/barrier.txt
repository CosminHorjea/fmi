#include <stdio.h>
#include <pthread.h>
#include <errno.h>
#include <semaphore.h>
#include <stdlib.h>

#define NTHRS 5
int S = NTHRS;
pthread_mutex_t mtx;
sem_t sem;

void *tfun(void *v);

void barrier_point()
{
    pthread_mutex_lock(&mtx);
    S--;
    pthread_mutex_unlock(&mtx);

    if(S != 0)
    {
        if(sem_wait(&sem))
        {
            perror("Error on semaphore wait");
            return errno;
        }
    }
    else
        for(int i = 0;i < NTHRS; i++)
            sem_post(&sem);
}

int main()
{
    pthread_t *thread = malloc(sizeof(pthread_t) * S);
    if(pthread_mutex_init(&mtx, NULL))
    {
        perror("Error on mutex init");
        return errno;
    }

    if(sem_init(&sem, 0, 0))
    {
        perror("Error on sem init");
        return errno;
    }

    for(int i = 0; i < NTHRS; i++)
    {
        int *x = malloc(sizeof(int));
        *x = i;
        if(pthread_create(&thread[i], NULL, tfun, x))
        {
            perror("Error on thread create");
            return errno;
        }
    }

    for(int i = 0; i < NTHRS; i++)
        if(pthread_join(thread[i], NULL))
        {
            perror("Error on thread join");
            return errno;
        }

    sem_destroy(&sem);
    pthread_mutex_destroy(&mtx);
    return 0;
}

void *tfun(void *v)
{
    int *tid = (int* ) v;
    printf("%d reached the barrier\n", *tid);
    barrier_point();
    printf("%d passed the barrier\n", *tid);

    free(tid);
    return NULL;
}