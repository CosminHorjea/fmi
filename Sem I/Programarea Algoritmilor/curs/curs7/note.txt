Notiuni de ordin de complexitate

binarySearch -> cursPart1.py
complexitate de O(logN), unde N e lungimea listei in care caut

Grafuri

G=(V,E); o pereche de elemente
V= multimea varfurilor = {1,2,....,n}
E= multimea muchiilor(cel mult V*V), multime de perechi neordonate->grafuri neorientate
    neorientate: (a,b)=(b,a) # tuple-ul este ordonat
Desen graf:
    v={1,2,3,4,5,6}
    e=(1,2),(2,6) etc.

Arbore: graf neorientar, conex si aciclic
    -(iara desen)
Arbore cu radacina:
    -fixam un nod ca radacina->desen
        -> reiese o ierarhie a nodurilor(nodurile sunt pe nivele)
    -arborii binari sunt cu radacina si fiecae nod are CEL MULT 2 descendenti

Reprezentare in memorie:
    -lista de muchii (principlaul input la probleme)
    -matrice de adiacenta
    -lista de adiacenta(l[i]=lista vecinilor lui i)(complexitate O(N+M),complexitate amortizata, worst case(N^2))amortizata- cand adun toate elementele ramane aceeasi complexitate
    # astea suntdezvoltate si cu cod in lab3
Parcurgeri pe graf ->cursPart2

Heapuri:
    -este un arbore binar complet
    -un arbore binar complet are logN nivele
    - v[0] va fi radacina heap-ului
        -fiul stang o sa fie i/2 si drept i/2+1
        - tatal lui v[j] o sa fie (j+1)//2 #cred ca poate sa fie j//2 si gata
MinHeap-uri:
    -este un heap cu prop ca pt oricare nod x , valoarea lui x este <=fiu stang de x si x<= fiul drept
    - radacina e cal mai mic nr din heap
    ex:
    [1,5,7,9,6,10,8,12,3]
    ->desen(completez un arbore binar complet in ordinea in care sunt pana cand ajung la un conflict)
        - la un conflict, numarul face "upheap", ii ia pozitia tatalui care este mai mare decat el, fac asta pana cand e ok conditia de minheap
        explicatie chiar ok:https://www.youtube.com/watch?v=J_80TauyErc
        - cand pun un nod dau append la vector, si cand il urc ma uit la tata (j-1)//2
        -aflu minimul O(1), cand extrag pun ultimul element din arbore la radacina si vad daca e conflict , do this pana e ok => O(logN)
    -implementare part3.py
