Programare Dinamica (cont.) :

# Longest common substring-> cel mai lung subsir comun dintre 2 siruri

v: 5,2,7,9,4,3,12,10 ->n
w: 5,9,2,7,10,14,3,10,19 -> m

(index de la 1->n(m))
matricea T[i][j]-> lungimea celui mai lung subsir comun dintre prefixul de lungime "i" a lui v si prefixul de lungime "j" a lui w
=> T[n][m]- lungimea maxima
T[0][j]=0
T[i][0]=0

T[i][j], i,j>0

T[i][j]=max{
			T[i-1][j]
			T[i][j-1]
			T[i-1][j-1]h
			}+(v[i]==v[j])(1)

# Optimal strategy for a game

lista de numere v=[............](de la 0 la 2k)
A si B 2 jucatori care pot alege un element de la inceput sa u la sfarsit(ca un deque)
Greedy: A calculeaza nr pare vs cele impare si le alege pe alea cu suma mai mare

PD: lungimea nu este 2k ci n
-trebuie sa-l fac pe A sa castige

daca mai ramene doar o piesa "i" pct garantat a lui a e v[i]
tabla: T[i][j]=punctajul garantat obtinut de A ca tabla V(i...j)

T[i][i]=v[i]
T[i][i+1]=max(v[i],v[i+1])

T[i][i+len]= max{
		>=2      v[i]+min(T[i+2][i+len],T[i+2][i+len-1])
				 v[i+len] + min(T[i+1][i+len-1],T[i][i+len-2])
				}
Pt len de la 2 la n
si pt i de la 1 la i+len<=n
		T[i][1+len]=....
In dreapta jos pctj minim care poate fi obtinut

# Problema Rucsacului
Daca as sti profitul maxim obtinut avand obiectele de greutate totala K atunci as putea rezolva problema

v[i]= profitul maxim obtinut avand greutatea 'i'
v[0]=0
v=[-1]*G
pt fiecare obiect o din obiecte 
	pt fiecare i(0,G)
		daca v[i]!=-1 si i+o.g(greutatea ob 'o')
			dava v[i]+ob.p<v[i+ob.g]

La examen scris:
- scris in pseudocod
- complexitatea
- ce reprezinta T[i][j] dupa=> cum se calculeaza
