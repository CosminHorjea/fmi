- Problema cuielor:
- Planificare tuturor activitatilor folosind un nr minim de sali(lab5)
- Descompunerea intr-un nr minim de subsiruri descrescatoare
- Acoperirea de cardinal maxim pt nodurile unui arbore

#Problema cuielor:
Intervale inchise(scanduri) si care este numarul minim de cuie pt a le fixa
 -- https://ocw.cs.pub.ro/courses/pa/laboratoare/laborator-02#problema_cuielor
 -- e facuta diferit dar cred ca e ok si asta

 sortez  A dupa stanga
 S= mult vida; nrCuie=0,cui=cel mai din dreapta cui=-1
 pt fiecare x din A:
 	DACA X.STANGA<=CUI si x.dreapta>=cui
 		continui
 	daca x.stanga > cui:
 		//scandura nu e batuta in cui
 		s.add(x.dr);nrc+=1,cui=x.dr
 	daca x.dr < cui:
 		daca sar peste o scnadura trebuei sa scot ultimul cui batut si il pun in cealalta pt ca ar ramane scanduri nefixate pe cazul asta
 		s.poplast()
 		s.add(x.dr)
 		cui=x.dr
Inductie:
	P1 e optim
	pk->pk+1
	Pt primul caz eu am batut in cuie k scanduri in mod optim si cu ultimul cui cel mai din dreapta, a k+1 scandura e si ea batuta in cuie, atunci e optim si pt k+1 pt ca deja e optim pt k
	caz 2: k+1 scandura e dupa ultimul cui, atunci solutia propusa foloseste nrc+1 cuie, si nu stiu daca e optim:
		Pp ca as putea sa bat in x(ult scandura)
	caz 3: daca ultimul cui sare o scandura, il scot si il mut mai la stanga

#Problema spectacolelor:
-- https://www.programcreek.com/2014/05/leetcode-meeting-rooms-ii-java/
// Rezolvarea de la lab5 e facuta cu un dictionar, mai eficient e cu o coada de prioritati in care ne da numarull salli care se termina cel mai repede, prioritizand ora de sfarsit
// In lab a cam trebuit sa folosesc dict pt ca a trebuit sa le afisez la final 
Sortez A dupa st
s= vector de lise 
s.add([a0])// prima activitate in sala 0
k=1
q.insert((a0.fin,0))
pt fiecare x din A[1:]:
	fie (h,s) = q.first()
	daca x.start<h
		S.add(x)
		k+=1
		q.insert((x.sf,k))
	altfel 
		q.pop()
		S[s].add(x)
		q.inser((x.fin,s))
//trebuie sa refac codul pt problema 6, lab 5
Demonstratie-> Inductie
pt o activitate aloc o sala, optim
pk->pk+1
am folosit p sali si am facut k activitati optim
vine activitatea k+1,daca pot sa introcu k+1 am k+1 actvitati si p sali , care e optim
daca nu pot sa o pun intr-o alta sala, creez o p+1 sala, e necesar?(sa am p+1 sali in loc de p sali)
nr de sali o sa fie >= depth_max (adancimea e cate activitati se suprapun intr-un anumit moment)
deci , cand adaug o noua sala pt a k+1 activitate o sa fie un depth p+1 sali, ceea ce insemana ca trebuie cel putin p+1 sali, dar eu folosesc deja p+1 pt k+1 ceea ce inseamna ca e optim


# Descompunerea intr-un nr minim de subsiruri descrescatoare
-- https://www.geeksforgeeks.org/minimum-number-of-increasing-subsequences/ (e invers dar gandirea e the same)
-nr de subsiruri descrescatoare este egal cu cel mai mare subsir crescator
S->vector de liste
B->vector care retine ultima valoare pt fiecare sir // gen B[0]= ultiam val din sirul 0
// B e mereu sortat
S.add([a0])
B[0]=1
pt fiecare x din A[1:]
	daca x>B.[-1]
		S.add([x])
		B.add(x)
	altfel
		fie h cu prop B[h]>x>=B[h-1]
		S[h].add(x)
		B[h]=x
Corectitudine: Prin reducere la absurd
Fie G-> sol greedy
si O->sol optima care difera de G la pasul cel mai tarziu