--LABORATOR 6 - continuare

9. Să se afişeze lista angajaţilor care au lucrat NUMAI pe proiecte 
conduse de managerul de proiect având codul 102.

select * from projects; -- managerul 102 conduce doua proiecte -> p1 si p3

select * from works_on; -> 136, 140, 150, 162, 176 angajatii care lucreaza numai pe proiecte
                            conduse de 102

ex: ang 400 lucreaza p1, p2, p3 gresit deoarece el nu lucreaza NUMAI pe proiecte conduse de 102

select employee_id
from works_on
where project_id in (select project_id
                     from projects
                     where project_manager = 102
                     ) -- angajati care lucreaza ori la toate proiectele lui 102, ori doar la o parte din ele
                       -- dar printre acesti angajati pot fi si angajati care lucreaza la alte proiecte
                       
MINUS -- eliminam angajatii care lucreaza si la alte proiecte care nu sunt conduse de 102

select employee_id
from works_on
where project_id not in (select project_id
                         from projects
                         where project_manager = 102
                        );


10. a) Să se obţină numele angajaţilor care au lucrat CEL PUTIN pe ACELEASI proiecte 
ca şi angajatul având codul 200.

select * from works_on; -- angajatul 200 lucreaza la p2 si p3

CEL PUTIN pe aceleasi proiecte -> angajatii pot lucra si la alte proiecte la care nu lucreaza 200 
            -> dar OBLIGATORIU ei trebuie sa lucreze la toate proiectele la care lucreaza ang 200

=> 101, 145, 148 (200 - dar il vom exclude)

select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200
                     ) -- o sa avem angajatii care lucreaza la toate proiectele lui 200 sau doar la o parte din ele
      and employee_id != 200
                     /*   
                    Un exemplu general: (bazat pe diverse cazuri posibile)
                    ang 500 - p2 - afisat - gresit deoarece nu are cel putin aceleasi proiecte ca ang 200
                    ang 600 - p2, p3 - afisat in urma executiei cererii de mai sus - corect
                    ang 700 - p1, p2, p3 -> afisat cu p2 si p3 - corect deoarece are cel putin aceleasi proiecte ca 200
                                                            - chiar daca lucreaza si la alte proiecte
                    ang 800 - p2, p1 -> afisat cu p2 - gresit pt ca nu lucreaza la toate proiectele lui 200

                    */
group by employee_id, last_name    
having count(*) = (select count(project_id)
                   from works_on
                   where employee_id = 200
                   );
                     
                     
b) Să se obţină numele angajaţilor care au lucrat CEL MULT pe aceleaşi proiecte 
ca şi angajatul având codul 200.

select * from works_on; -- angajatul 200 lucreaza la p2 si p3

CEL MULT -> inseamna ca angajatii sa lucreze la MACAR un proiect la care lucreaza ang 200 sau la ambele
            dar nu pot lucra la alte proiecte la care 200 nu lucreaza 

=> 101, 145, 148, 150 (doar la p3), 162 (doar la p3), 176 (doar la p3)

--metoda 1
select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200
                     ) 
     and employee_id != 200
group by employee_id, last_name    
having count(*) <= (select count(project_id)
                   from works_on
                   where employee_id = 200
                   ) -- <= inseamna ca angajatii lucreaza la toate proiectele lui 200 sau doar la o parte din ele
                   
MINUS -- eliminam angajatii care lucreaza la proiecte la care ang 200 nu lucreaza 

select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on -- din lista tuturor proiectelor la care lucreaza angajati
                     
                     MINUS -- elimin proiectele la care lucreaza 200
                     
                     select project_id
                     from works_on
                     where employee_id = 200
                     
                     ); -- obtin proiectele la care nu lucreaza 200

ex: ang 500 -> lucreaza p1, p2, p3 acest caz o sa fie eliminat deoarece 500 lucreaza si alte proiecte
            -> fata de proiectele angajatului 200


--metoda 2
select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200
                     ) -- angajatii care lucreaza la toate proiectele lui 200 sau doar la o parte din ele
     and employee_id != 200
                   
MINUS -- eliminam angajatii care lucreaza la proiecte la care ang 200 nu lucreaza 

select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on -- din lista tuturor proiectelor la care lucreaza angajati
                     
                     MINUS -- elimin proiectele la care lucreaza 200
                     
                     select project_id
                     from works_on
                     where employee_id = 200
                     
                     ); -- obtin proiectele la care nu lucreaza 200

--metoda 3
select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200
                     ) -- angajatii care lucreaza la toate proiectele lui 200 sau doar la o parte din ele
     and employee_id != 200
                   
MINUS -- eliminam angajatii care lucreaza la proiecte la care ang 200 nu lucreaza 

select employee_id, last_name
from employees join works_on using (employee_id)
where project_id not in (select project_id
                         from works_on 
                         where employee_id = 200
                        );

--metoda 4
select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200
                     ) -- angajatii care lucreaza la toate proiectele lui 200 sau doar la o parte din ele
     and employee_id != 200
                   
MINUS -- eliminam angajatii care lucreaza la proiecte la care ang 200 nu lucreaza 

select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select distinct project_id
                     from works_on 
                     where project_id not in (select project_id
                                              from works_on
                                              where employee_id = 200) -- proiectele la care ang 200 nu lucreaza
                     );


11. Să se obţină angajaţii care au lucrat pe ACELEASI proiecte ca şi angajatul având codul 200.

select * from works_on; -- angajatul 200 lucreaza la p2 si p3

pe aceleasi proiecte => angajatii ca lucreze fix pe aceleasi proiecte ca si ang 200 (p2, p3)
-> dar angajatii nu pot lucra si la alte proiecte la care ang 200 nu lucreaza


select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select project_id
                     from works_on
                     where employee_id = 200
                     ) 
      and employee_id != 200
group by employee_id, last_name    
having count(*) = (select count(project_id)
                   from works_on
                   where employee_id = 200
                   ); -- angajatii lucreaza la toate proiectele la care lucreaza ang 200
                   -- dar pot lucra si la alte proiecte la care nu lucreaza ang 200
                   -- ex: ang 500 - p1, p2, p3 - nu este corect deoarece lucreaza si la alte proiecte 
                                               -- la care ang 200 nu lucreaza (p1)
                                               
MINUS -- eliminam angajatii care lucreaza la proiecte la care ang 200 nu lucreaza 

select employee_id, last_name
from employees join works_on using (employee_id)
where project_id in (select distinct project_id
                     from works_on 
                     where project_id not in (select project_id
                                              from works_on
                                              where employee_id = 200) -- obtinem proiectele la care ang 200 nu lucreaza
                     );

--Variabile de substitutie
8. Să se determine departamentele având media salariilor mai mare decât un număr dat.

select department_id, round(avg(salary))
from employees
group by department_id
having avg(salary) > &p;

select department_id, round(avg(salary))
from employees
group by department_id
having avg(salary) > &&p;

define;

undefine p;

--Ex1:

define x = &&y;

select &x from dual;

undefine y;

select &x from dual;

define;

undefine x;

select &&x from dual;


14. Sa se afiseze codul, numele, salariul si codul departamentului din care face parte 
pentru un angajat al carui cod este introdus de utilizator de la tastatura. 
Analizati diferentele dintre cele 4 posibilitati prezentate mai jos :

I.
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;

II.
DEFINE p_cod;
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;
UNDEFINE p_cod;

define;

III.
DEFINE p_cod=100;
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;
UNDEFINE p_cod;

IV.
ACCEPT p_cod PROMPT "cod= ";
SELECT employee_id, last_name, salary, department_id
FROM employees
WHERE employee_id = &p_cod;


15. Sa se afiseze o coloana aleasa de utilizator, dintr-un tabel ales de utilizator, 
ordonand dupa aceeasi coloana care se afiseaza. De asemenea, este obligatorie precizarea unei conditii WHERE.

SELECT &&p_coloana  -- && determina ca valoarea lui p_coloana sa nu mai
                    --fie ceruta si pentru clauza ORDER BY, urmand sa
                    --fie utilizata valoarea introdusa aici pentru toate
                    --aparitiile ulterioare ale lui &p_coloana
FROM &p_tabel
WHERE &p_where
ORDER BY &p_coloana;


16. Să se realizeze un script (fişier SQL*Plus) prin care să se afişeze numele, 
job-ul şi data angajării salariaţilor care au început lucrul între 2 date calendaristice introduse de utilizator. 
Să se concateneze numele şi job-ul, separate prin spaţiu şi virgulă, şi să se eticheteze coloana "Angajati". 
Se vor folosi comanda ACCEPT şi formatul pentru data calendaristica MM/DD/YY.

ACCEPT data_inceput PROMPT 'Introduceti data de inceput'
ACCEPT data_sfarsit PROMPT 'Introduceti data de sfarsit'
SELECT last_name, job_id, hire_date
FROM employees
WHERE hire_date BETWEEN TO_DATE('&data_inceput', 'mm/dd/yy')
                    AND TO_DATE('&data_sfarsit', 'mm/dd/yy');

define;



